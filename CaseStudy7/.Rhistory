# Load necessary libraries for analysis
library(data.table)
library(tidyverse)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(rattle)
#Code to install Data Explorer below
#if (!require(devtools)) install.packages("devtools")
#devtools::install_github("boxuancui/DataExplorer")
library(DataExplorer)
# Load necessary libraries for analysis
library(data.table)
library(tidyverse)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(rattle)
#Code to install Data Explorer below
if (!require(devtools)) install.packages("devtools")
devtools::install_github("boxuancui/DataExplorer")
library(class)
# Load necessary libraries for analysis
library(data.table)
library(tidyverse)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(rattle)
install.packages("class")
library(class)
#Code to install Data Explorer below
#if (!require(devtools)) install.packages("devtools")
#devtools::install_github("boxuancui/DataExplorer")
library(DataExplorer)
install.packages("class")
# Load necessary libraries for analysis
library(data.table)
library(tidyverse)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(rattle)
#("class")
library(class)
#Code to install Data Explorer below
#if (!require(devtools)) install.packages("devtools")
#devtools::install_github("boxuancui/DataExplorer")
library(DataExplorer)
# read in the data file
df = read.csv(file.choose(),header=TRUE)
output = introduce(df)
output = cbind(variable=names(output),t(output))
as.data.table(output)
output <- data.frame(sapply(df,class))
output <- cbind(variable = names(df), output)
as.data.table(output)
plot_missing(df[1:10], title = "Plot of Missing Values: 1 - 10")
plot_missing(df[11:20], title = "Plot of Missing Values: 11 - 20")
plot_missing(df[21:30],title = "Plot of Missing Values: 21 - 30")
plot_missing(df[31:40],title = "Plot of Missing Values: 31 - 40")
plot_missing(df[41:51],title = "Plot of Missing Values: 41 - 51")
plot_bar(df,title="Bar Plots of Discrete Variables")
plot_histogram(df, title="Histogram Plots of Continuous Variables")
df <- df %>% mutate(x32 = as.numeric(gsub("%", "", x32)))
df <- df %>% mutate(x37 = as.numeric(gsub("\\$", "", x37)))
df %>%
mutate(across(where(is.character), str_trim))
df = na.omit(df)
output = introduce(df)
output = cbind(variable=names(output),t(output))
as.data.table(output)
set.seed(100)
cntTrainRecs = createDataPartition(y=df$y,p=0.8,list=FALSE)
train_df = df[cntTrainRecs,]
test_df = df[-cntTrainRecs,]
print(paste("Training Set Size: " ,dim(train_df)[1]))
print(paste("Test Set Size: " ,dim(test_df)[1]))
set.seed(100)
cntTrainRecs = createDataPartition(y=df$y,p=0.8,list=FALSE)
train_df = df[cntTrainRecs,]
test_df = df[-cntTrainRecs,]
train_df_labels <- train_df[1:51, 1]
print(paste("Training Set Size: " ,dim(train_df)[1]))
print(paste("Test Set Size: " ,dim(test_df)[1]))
head(train_df_labels)
set.seed(100)
cntTrainRecs = createDataPartition(y=df$y,p=0.8,list=FALSE)
train_df = df[cntTrainRecs,]
test_df = df[-cntTrainRecs,]
train_df_labels <- train_df[1:51, 0]
print(paste("Training Set Size: " ,dim(train_df)[1]))
print(paste("Test Set Size: " ,dim(test_df)[1]))
head(train_df_labels)
prc_test_pred <- knn(train = train_df, test = test_df, k=10)
train_df
test_df$y
train_df$y
prc_test_pred <- knn(train = train_df, test = test_df, cl = train_df$y, k=10)
train$Road_Type <- as.numeric(as.integer(factor(train$Road_Type)))
train_df$y <- as.numeric(as.integer(factor(train_df$y)))
prc_test_pred <- knn(train = train_df, test = test_df, cl = train_df$y, k=10)
str(train_df)
train_df_knn <- train_df[, !c("x24", "x29","x30")]
train_df_knn <- train_df[, -c("x24", "x29","x30")]
train_df_knn <- train_df[, -c('x24', 'x29','x30')]
train_df_knn <- train_df[, -c(25,30,31)]
test_df_knn <- test_df[, -c(25,30,31)]
prc_test_pred <- knn(train = train_df_knn, test = test_df_knn, cl = train_df_knn$y, k=10)
# Load necessary libraries for analysis
library(data.table)
library(tidyverse)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(rattle)
library(class)
install.packages("gmodels")
library(gmodels)
#Code to install Data Explorer below
#if (!require(devtools)) install.packages("devtools")
#devtools::install_github("boxuancui/DataExplorer")
library(DataExplorer)
CrossTable(x=test_df_knn$y, y = prc_test_pred, prop.chisq = FALSE)
train_df_knn <- train_df[, -c(25,30,31)]
test_df_knn <- test_df[, -c(25,30,31)]
prc_test_pred <- knn(train = train_df_knn, test = test_df_knn, cl = train_df_labels, k=15)
train_df_knn <- train_df[, -c(25,30,31)]
test_df_knn <- test_df[, -c(25,30,31)]
prc_test_pred <- knn(train = train_df_knn, test = test_df_knn, cl = train_df$y, k=15)
CrossTable(x=test_df$y, y = prc_test_pred, prop.chisq = FALSE)
prc_test_pred
train_df$y
test_df$y
# read in the data file
df = read.csv(file.choose(),header=TRUE)
output = introduce(df)
output = cbind(variable=names(output),t(output))
as.data.table(output)
output <- data.frame(sapply(df,class))
output <- cbind(variable = names(df), output)
as.data.table(output)
plot_missing(df[1:10], title = "Plot of Missing Values: 1 - 10")
plot_missing(df[11:20], title = "Plot of Missing Values: 11 - 20")
plot_missing(df[21:30],title = "Plot of Missing Values: 21 - 30")
plot_missing(df[31:40],title = "Plot of Missing Values: 31 - 40")
plot_missing(df[41:51],title = "Plot of Missing Values: 41 - 51")
plot_bar(df,title="Bar Plots of Discrete Variables")
plot_histogram(df, title="Histogram Plots of Continuous Variables")
df <- df %>% mutate(x32 = as.numeric(gsub("%", "", x32)))
df <- df %>% mutate(x37 = as.numeric(gsub("\\$", "", x37)))
df %>%
mutate(across(where(is.character), str_trim))
df = na.omit(df)
output = introduce(df)
output = cbind(variable=names(output),t(output))
as.data.table(output)
plot_bar(df,title="Bar Plots of Discrete Variables")
plot_histogram(df,title="Bar Plots of Continuous Variables")
plot_correlation(df,type="discrete", title="Correlation Plot: Discrete Variables")
plot_correlation(df,type="continuous", title="Correlation Plot: Continuous Variables")
set.seed(100)
cntTrainRecs = createDataPartition(y=df$y,p=0.8,list=FALSE)
train_df = df[cntTrainRecs,]
test_df = df[-cntTrainRecs,]
print(paste("Training Set Size: " ,dim(train_df)[1]))
print(paste("Test Set Size: " ,dim(test_df)[1]))
train_df$y
test_df$y
train_df_knn <- train_df[, -c(25,30,31)]
test_df_knn <- test_df[, -c(25,30,31)]
prc_test_pred <- knn(train = train_df_knn, test = test_df_knn, cl = train_df$y, k=15)
test_df$y
train_df$y
CrossTable(x=test_df$y, y = prc_test_pred, prop.chisq = FALSE)
# Removing the character column values
train_df_knn <- train_df[, -c(25,30,31)]
test_df_knn <- test_df[, -c(25,30,31)]
prc_test_pred <- knn(train = train_df_knn, test = test_df_knn, cl = train_df$y, k=30)
CrossTable(x=test_df$y, y = prc_test_pred, prop.chisq = FALSE)
# Removing the character column values
train_df_knn <- train_df[, -c(25,30,31)]
test_df_knn <- test_df[, -c(25,30,31)]
prc_test_pred <- knn(train = train_df_knn, test = test_df_knn, cl = train_df$y, k=12)
CrossTable(x=test_df$y, y = prc_test_pred, prop.chisq = FALSE)
# Load necessary libraries for analysis
library(data.table)
library(tidyverse)
library(ggplot2)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(rattle)
library(class)
#install.packages("gmodels")
library(gmodels)
#Code to install Data Explorer below
#if (!require(devtools)) install.packages("devtools")
#devtools::install_github("boxuancui/DataExplorer")
library(DataExplorer)
# read in the data file
df = read.csv(file.choose(),header=TRUE)
logRegress = glm(formula= y~., family=binomial, data=train_df)
summary(logRegress)
# get variable importance - Probably should plot
varImp(logRegress)
#Predict
predictLogRegress = predict(logRegress,test_df,type="response")
#output the confusion matrix
table(test_df$y,predictLogRegress >= 0.5)
#Build out random forest for analysis
set.seed(100)
#Mtry = sqrt(ncol(emailDFrp)-2)
Ntrees = 500
#track the processing time for grins
startTime = proc.time()
RFModel = randomForest(y~.-y,data=train_df,ntree=Ntrees, importance=TRUE)
endTime = proc.time()
